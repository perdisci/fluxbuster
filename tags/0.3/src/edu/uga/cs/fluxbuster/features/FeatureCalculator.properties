DOMAINS_TABLE_PREFIX = domains
RESIPS_TABLE_PREFIX = resolved_ips
#RESIPS_TABLE_PREFIX = cluster_resolved_ips

#these two properties must have the same number of comma delimited items
NOVELTY_WINDOWS=7,30,180
NOVELTY_WINDOW_FIELDS=novelty_one_week,novelty_one_month,novelty_six_months

PREVCLUSTER_WINDOW=9
DOMAINSPERNETWORK_WINDOW=9

#original query
TABLES_QUERY1 = \
	SELECT \
		tablename \
	FROM \
		pg_tables \
	WHERE \
		schemaname='public' \
		AND (tablename like 'domains_%' OR tablename like 'resolved_ips_%')


DOMAINSPERNETWORK_QUERY1 = \
	UNION \
		SELECT \
			cluster_id, \
			domain_name \
		FROM \
			cluster_resolved_ips_%s \
				JOIN \
			resolved_ips_%s \
				USING(resolved_ip) \
				JOIN \
			domains_%s \
				USING(domain_id)
				
DOMAINSPERNETWORK_QUERY2 = \
	SELECT \
		cluster_id, \
		COUNT(DISTINCT domain_name) AS domains_per_network \
	FROM \
		(SELECT \
			cluster_id, \
			domain_name \
		FROM \
			cluster_resolved_ips_%s \
				JOIN \
			resolved_ips_%s \
				USING(resolved_ip) \
				JOIN \
			domains_%s \
				USING(domain_id) %s) AS tt \
	GROUP BY \
		cluster_id \
	ORDER BY \
		cluster_id
		
DOMAINSPERNETWORK_QUERY3 = \
	UPDATE \
		cluster_feature_vectors_%s \
	SET \
		domains_per_network=%s \
	WHERE \
		cluster_id=%s\ 


#query without resolved ips table
#NOVELTY_QUERY1 = \
#	SELECT \
#		tablename \
#	FROM \
#		pg_tables \
#	WHERE \
#		schemaname='public' \
#		AND (tablename like 'domains_%' OR tablename like 'cluster_resolved_ips_%')


#original query
NOVELTY_QUERY1_PART1 = \
	SELECT \
		second_level_domain_name, \
		cluster_id, \
		new_ip_cnt \
	FROM \
		(SELECT \
			second_level_domain_name, \
			COUNT(DISTINCT new_ips.resolved_ip) AS new_ip_cnt \
		FROM \
			domains_%s JOIN \
			resolved_ips_%s \
				USING(domain_id) \
				LEFT JOIN \
			(SELECT \
				resolved_ip \
			FROM \
				resolved_ips_%s

NOVELTY_QUERY1_PART2 = EXCEPT SELECT resolved_ip FROM resolved_ips_%s

NOVELTY_QUERY1_PART3 = \
	) AS new_ips \
			USING(resolved_ip) \
		GROUP BY second_level_domain_name) AS t \
			JOIN \
		(SELECT \
			cluster_id, second_level_domain_name FROM \
			clusters_%s \
				JOIN \
			domains_%s \
				USING(domain_id) \
		GROUP BY \
			cluster_id, \
			second_level_domain_name) AS t2 \
			USING(second_level_domain_name) \
	GROUP BY \
		cluster_id, \
		second_level_domain_name, \
		new_ip_cnt

NOVELTY_QUERY2 = \
	SELECT \
		domains_%s.second_level_domain_name AS f1, \
		domains_%s.log_date AS f2 \
	FROM \
		domains_%s \
			JOIN \
		domains_%s \
			USING(second_level_domain_name) \
	GROUP BY \
		f1, \
		f2

# AND log_date='%s' is probably not necessary since all of the 
# records in the table will have the same log_date anyway		
NOVELTY_QUERY3 = \
	UPDATE \
		cluster_feature_vectors_%s \
	SET \
		%s=%s \
	WHERE \
		cluster_id=%s \
		AND log_date='%s'
		
		
PREVCLUSTER_QUERY1 = \
	SELECT \
		c.cluster_id, \
		c.sensor_name, \
		resolved_ip \
	FROM \
		(SELECT \
			cluster_id, \
			sensor_name, \
			domain_name \
		FROM \
			clusters_%s \
				JOIN \
			domains_%s \
				USING(domain_id) \
		) AS c \
			JOIN domains_%s USING(domain_name) \
			JOIN clusters_%s AS p USING(domain_id), \
		cluster_resolved_ips_%s AS r  \
	WHERE \
		(p.cluster_id = r.cluster_id \
		AND p.sensor_name = r.sensor_name)
		
PREVCLUSTER_QUERY2 = \
	SELECT \
		cluster_id, \
		sensor_name, \
		COUNT(DISTINCT tt.resolved_ip), \
		COUNT(DISTINCT broadcast(set_masklen(tt.resolved_ip, 24))) \
	FROM \
		cluster_resolved_ips_%s \
			LEFT JOIN \
		(SELECT \
			cluster_id, \
			sensor_name, \
			resolved_ip \
		FROM \
			cluster_resolved_ips_%s \
		EXCEPT \
			(%s)) AS tt \
			USING(cluster_id, sensor_name) \
	GROUP BY cluster_id, sensor_name \
	ORDER BY cluster_id, sensor_name
	
PREVCLUSTER_QUERY3 = \
	SELECT \
		cluster_id, \
		queries_per_domain, \
		sensor_name \
	FROM \
		cluster_feature_vectors_%s \
	WHERE \
		network_cardinality > 0 \
	ORDER BY cluster_id, sensor_name
	
PREVCLUSTER_QUERY4 = \
	UPDATE \
		cluster_feature_vectors_%s \
	SET \
		last_growth_ratio_prev_clusters=%s , \
		last_growth_prefix_ratio_prev_clusters=%s \
	WHERE \
		cluster_id=%s\ 